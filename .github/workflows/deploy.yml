name: Deploy

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  push:
    branches: [ "staging" ]
    paths-ignore: [ "docs/**" ]


jobs:
  secrets-base:
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'staging' || github.ref_name == 'main' }}
    steps:

      - name: Create secret files
        env:
          PRODUCTION_DJANGO: ${{ secrets.PRODUCTION_DJANGO }}
          PRODUCTION_POSTGRES: ${{ secrets.PRODUCTION_POSTGRES }}
          PRODUCTION_TRAEFIK: ${{ secrets.PRODUCTION_TRAEFIK }}
        run: |
          echo $PRODUCTION_DJANGO | base64 -di > .django
          echo $PRODUCTION_POSTGRES | base64 -di > .postgres
          echo $PRODUCTION_TRAEFIK | base64 -di > .traefik

      - uses: actions/upload-artifact@v2
        with:
          name: production-django
          path: .django

      - uses: actions/upload-artifact@v2
        with:
          name: production-postgres
          path: .postgres

      - uses: actions/upload-artifact@v2
        with:
          name: production-traefik
          path: .traefik

  secrets-staging:
    needs: secrets-base
    runs-on: ubuntu-latest
    if: ${{ github.ref_name == 'staging' }}
    steps:

      - name: Create secret files
        env:
          STAGING_DJANGO: ${{ secrets.STAGING_DJANGO }}
          STAGING_TRAEFIK: ${{ secrets.STAGING_TRAEFIK }}
          STAGING_TFVARS: ${{ secrets.STAGING_TFVARS }}
        run: |
          echo $STAGING_DJANGO | base64 -di > .django
          echo $STAGING_TRAEFIK | base64 -di > .traefik
          echo $STAGING_TFVARS | base64 -di > staging.tfvars

      - uses: actions/upload-artifact@v2
        with:
          name: staging-django
          path: .django

      - uses: actions/upload-artifact@v2
        with:
          name: staging-traefik
          path: .traefik

      - uses: actions/upload-artifact@v2
        with:
          name: staging-tfvars
          path: staging.tfvars

  plan-and-apply-staging:
    needs: secrets-base
    name: Plan and Apply
    env:
      TF_VAR_allowed_account_id: ${{ secrets.ALLOWED_ACCOUNT_ID }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Create env directories
        run: |
          mkdir -p .envs/.production
          mkdir -p .envs/.staging

      - uses: actions/download-artifact@v2
        with:
          name: production-django
          path: .envs/.production

      - uses: actions/download-artifact@v2
        with:
          name: production-postgres
          path: .envs/.production

      - uses: actions/download-artifact@v2
        with:
          name: production-traefik
          path: .envs/.production

      - uses: actions/download-artifact@v2
        with:
          name: staging-django
          path: .envs/.staging

      - uses: actions/download-artifact@v2
        with:
          name: staging-traefik
          path: .envs/.staging

      - uses: actions/download-artifact@v2
        with:
          name: staging-tfvars
          path: terraform

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.9

      - name: Initialize Terraform
        run: |
          cd terraform
          terraform init -input=false

      - name: Create and select workspace
        continue-on-error: true
        run: |
          cd terraform
          terraform workspace new staging
          terraform workspace select staging

      - name: Download tfvars
        uses: actions/download-artifact@v2
        with:
          name: staging-tfvars
          path: terraform

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          cd terraform
          terraform plan -var-file=staging.tfvars \
          -var "ssh_private_key={{ secrets.SSH_PRIVATE_KEY }}" -input=false -no-color \
          -out=tfplan && terraform show -no-color tfplan

      # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
      # It stores the amount of spaces in `\1` and the +/- in `\2`.
      # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
      - name: Reformat Plan
        if: steps.plan.outcome == 'success'
        run: |
          echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
          | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt

      - name: Put Plan in Env Var
        if: steps.plan.outcome == 'success'
        run: |
          PLAN=$(cat plan.txt)
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Apply Terraform
        if: steps.plan.outcome == 'success'
        id: apply
        continue-on-error: true
        run: |
          cd terraform
          terraform apply -input=false -no-color tfplan

      - name: Add Plan and Apply job summary
        if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
        run: |
          echo "### Applying **staging**:" >> $GITHUB_STEP_SUMMARY
          echo ""  >> $GITHUB_STEP_SUMMARY
          echo "```diff" >> $GITHUB_STEP_SUMMARY
          echo ""  >> $GITHUB_STEP_SUMMARY
          echo "${{ env.PLAN }}" >> $GITHUB_STEP_SUMMARY
          echo "```"  >> $GITHUB_STEP_SUMMARY
          echo "```"  >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.apply.outputs.stdout }}" >> $GITHUB_STEP_SUMMARY
          echo "```"  >> $GITHUB_STEP_SUMMARY

      - name: Add Plan Failure job summary
        if: steps.plan.outcome == 'failure'
        run: |
          echo "### Plan failed for **staging**:" >> $GITHUB_STEP_SUMMARY
          echo "```"  >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.plan.outputs.stderr }}" >> $GITHUB_STEP_SUMMARY
          echo "```"  >> $GITHUB_STEP_SUMMARY

      - name: Add Apply Failure job summary
        if: steps.apply.outcome == 'failure'
        run: |
          echo "### Apply failed for **staging**:" >> $GITHUB_STEP_SUMMARY
          echo "```"  >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.apply.outputs.stderr }}" >> $GITHUB_STEP_SUMMARY
          echo "```"  >> $GITHUB_STEP_SUMMARY
